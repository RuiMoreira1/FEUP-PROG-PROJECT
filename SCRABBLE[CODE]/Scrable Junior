#include <iostream>
#include <iostream>
#include <iostream>
#include <vector>
#include <string>
#include <time.h>
#include <stdlib.h>
#include "BOARD.h"
#include "Player.h"
#include "Pool.h"
using namespace std;

void Crossed_Words(Pool po, vector<vector<int>>& crossed)
{
    int in = 0;
    for (int i = 0; i < po.Get_Size_w(); i++)
    {
        for (int a = 0; a < po.Get_Size_w(); a++)
        {
            if (a == i)
            {
                break;
            }
            if (po.Get_direc(i) != po.Get_direc(a))
            {
                for (int y = 0; y < po.Get_w_Size(i); y++)
                {
                    for (int z = 0; z < po.Get_w_Size(a); z++)
                    {
                        if (po.Get_all_coor1(i, y) == po.Get_all_coor1(a, z) && po.Get_all_coor2(i, y) == po.Get_all_coor2(a, z))
                        {
                            crossed.push_back(vector<int>());
                            crossed[in].push_back(po.Get_all_coor1(i, y));
                            crossed[in].push_back(po.Get_all_coor2(i, y));
                            crossed[in].push_back(i);
                            in = in + 1;
                        }
                    }
                }
            }
        }
    }
}
void Translate(vector<int>& v, string g)
{
    vector<char> ABC = { 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M','N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z' };
    vector<char> abc = { 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm','n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z' };
    for (int i = 0; i < abc.size(); i++)
    {
        if (g[0] == ABC[i])
        {
            v.push_back(i + 1);
        }
    }
    for (int a = 0; a < abc.size(); a++)
    {
        if (g[1] == abc[a])
        {
            v.push_back(a + 1);
        }
    }

}
void Find_Word(vector<int>& v, vector<int> v2, Pool po)
{
    for (int i = 0; i < po.Get_Size_w(); i++)
    {
        for (int a = 0; a < po.Get_w_Size(i); a++)
        {
            if (v2[0] == po.Get_all_coor1(i, a) && v2[1] == po.Get_all_coor2(i, a))
            {
                v.push_back(i);
            }
        }
    }
}
bool Valid_Play(vector<int> word, vector<int> coor, Pool po)
{
    int d = 0;
    vector<int> v;
    for (int i = 0; i < word.size(); i++)
    {
        for (int a = 0; a < po.Get_word_copy(word[i]).length(); a++)
        {

            if (po.Get_all_coor1(word[i], a) == coor[0] && po.Get_all_coor2(word[i], a) == coor[1])
            {
                string temp = po.Get_word_copy(word[i]);
                if (a == 0)
                {
                    return true;
                }
                for (int x = 0; x < a; x++)
                {
                    if (temp[x] != '#')
                    {
                        d = 1;
                        v.push_back(1);
                        break;
                    }
                }
                if (d == 0)
                {
                    v.push_back(0);
                }
                d = 0;

            }
        }
    }
    for (int u = 0; u < v.size(); u++)
    {
        if (v[u] == 0)
        {
            return true;
        }
    }
    return false;

}
char Letter_Finder(vector<int> v, vector<int> coor, Pool po)
{
    char letter;
    int st = 0;
    for (int i = 0; i < v.size(); i++)
    {
        st = 0;
        for (int a = 0; a < po.Get_word_copy(v[i]).length(); a++)
        {
            if (po.Get_all_coor1(v[i], a) == coor[0] && po.Get_all_coor2(v[i], a) == coor[1])
            {
                string temp;
                temp = po.Get_word_copy(v[i]);
                return temp[a];
            }
        }
    }
}
bool Hand_Cheacker(vector<int> v, vector<int> coor, Pool p, Player pr)
{
    for (int i = 0; i < pr.Get_H_Size(); i++)
    {
        if (pr.GetHand(i) == Letter_Finder(v, coor, p))
        {
            return true;
        }
    }
    return false;
}
bool Check_Coor(vector<int>& word, vector<int> vf, Player p, Pool po)
{

    if (word.size() == 0)
    {
        return false;
    }
    if (word.size() > 0)
    {
        return true;
    }
}
void Hash_Helper(vector<int> word, vector<int> coor, Pool& po, Player p, string player_coor)
{
    for (int i = 0; i < word.size(); i++)
    {
        for (int a = 0; a < po.Get_word_copy(word[i]).length(); a++)
        {
            if (po.Get_all_coor1(word[i], a) == coor[0] && po.Get_all_coor2(word[i], a) == coor[1])
            {
                po.Set_to_Hash(word[i], a, player_coor);
                // Remove The tile from hand
            }
        }
    }
}
void Check_Completion(vector<int> words, Player& p, Pool po)
{
    for (int i = 0; i < words.size(); i++)
    {
        int flg = 0;
        for (int a = 0; a < po.Get_word_copy(words[i]).length(); a++)
        {
            string temp = po.Get_word_copy(words[i]);
            if (temp[a] != '#')
            {
                flg = 1;
            }
        }
        if (flg == 0)
        {
            p.SetToken(p.GetTokens() + 1);
            cout << "Player " << p.GetNum() << " - " << p.GetTokens() << endl;
        }
    }
}
bool Play_Possibility(Player p, Pool po)
{
    vector<char> v;
    for (int i = 0; i < po.Get_Size_w(); i++)
    {
        for (int a = 0; po.Get_word_copy(i).length(); a++)
        {
            string temp;
            temp = po.Get_word_copy(i);
            if (temp[a] != '#')
            {
                v.push_back(temp[a]);
                break;
            }
        }

    }
    for (int i = 0; i < v.size(); i++)
    {
        cout << v[i] << " ";
    }
    cout << endl;
    for (int i = 0; i < p.Get_H_Size(); i++)
    {
        for (int a = 0; a < v.size(); a++)
        {
            if (p.GetHand(i) == v[a])
            {
                return true;
            }
        }

    }
    return false;

}
void Vez(Player& y, Pool& p)
{
    if (Play_Possibility(y, p) == false && p.Get_Size() == 0)
    {
        return;
    }
    while (Play_Possibility(y, p) == false)
    {
        p.Add_to_Pool(y.GetHand(0));
        y.Remove_from_Hand(0);
        y.SetHand(p.Give_Tile(3));
        cout << "A hand foi mudada" << endl;

    }
    for (int i = 0; i < p.Get_Size_w(); i++)
    {
        cout << p.Get_word_copy(i) << " ";
    }
    cout << endl;
    cout << "As pecas do jogador sao:" << endl;
    for (int i = 0; i < y.Get_H_Size(); i++)
    {
        cout << y.GetHand(i) << " ";
    }
    cout << '\n';
    string player_coor;
    vector<int> tranlated;
    cout << "Onde quer jogar? " << endl;
    cin >> player_coor;
    Translate(tranlated, player_coor);
    vector<int> word;
    Find_Word(word, tranlated, p);
    cout << tranlated[0] << tranlated[1] << endl;
    while (Check_Coor(word, tranlated, y, p) == false || Letter_Finder(word, tranlated, p) == '#' || Valid_Play(word, tranlated, p) == false || Hand_Cheacker(word, tranlated, p, y) != true)
    {
        cout << "Cordenadas invalidas!" << endl;
        cout << "Onde quer jogar? ";
        cin >> player_coor;
        tranlated = {};
        Translate(tranlated, player_coor);
        word = {};
        Find_Word(word, tranlated, p);
    }
    if (Valid_Play(word, tranlated, p) == true)
    {
        for (int i = 0; i < y.Get_H_Size(); i++)
        {
            if (Letter_Finder(word, tranlated, p) == y.GetHand(i))
            {
                y.Remove_from_Hand(i);
                break;
            }
        }
        Hash_Helper(word, tranlated, p, y, player_coor);
        Check_Completion(word, y, p);
        p.Set_All(tranlated);
    }

}
int main()
{   
    Pool po;
    Player p1, p2, p3, p4;
    vector<Player> p = { p1, p2, p3, p4 };
    size_t size;
    po.init_class(); //Initializing class members
    po.FormPool();
    po.Form_init_coor();
    po.Form_word();
    po.Form_direc();
    po.Form_all_coor();
    po.Vector_Copy();
    vector<vector<int>> crossed;
    vector<char> rep_letters;
    Crossed_Words(po, crossed);
    cout << "Cross: " << crossed.size() << endl;
    for (int i = 0; i < crossed.size(); i++)
    {
        vector<int> local_wo = {crossed[i][2]};
        rep_letters.push_back(Letter_Finder(local_wo, crossed[i], po));
    }
    po.Remove_Targeted_Tiles(rep_letters);
    cout << po.Get_Size() << endl;
    cout << "Quantos jogadores? " << endl;
    cin >> size;
    while (!cin || ((size > 4) || (size < 2)))
    {
        cin.clear();
        cin.ignore(100000, '\n');
        cout << "Numero errado de jogadores. Tem de ser entre 2 e 4! " << endl;
        cout << "Quantos jogadores? ";
        cin >> size;
    }
    for (int i = 0; i < size; i++)
    {
        for (int a = 0; a < 7; a++)
        {
            if (po.Get_Size() == 0)
            {
                break;
            }
            p[i].SetHand(po.Give_Tile(a));

        }
        cout << endl;
        if (po.Get_Size() == 0)
        {
            break;
        }
    }
    for (int i = 0; i < size; i++)
    {
        p[i].SetNum(i + 1);
    }
    int end_con = 0;
    for (int i = 0; i < size; i++)
    {
        end_con = p[i].Get_H_Size() + end_con;
    }
    while (end_con > 0)
    {
        end_con = 0;
        for (int i = 0; i < size; i++)
        {
            int flg = 0;
            cout << "Jogador " << i + 1 << " --------------" << endl;
            po.Print_Board();
            Vez(p[i], po);
            po.Print_Board();
            Vez(p[i], po);
            if (po.Get_Size() >= 2)
            {
                p[i].SetHand(po.Give_Tile(i));
                p[i].SetHand(po.Give_Tile(i));
                flg = 1;
            }
            if (po.Get_Size() >= 1 && flg == 0)
            {
                p[i].SetHand(po.Give_Tile(i));
            }
            end_con = p[i].Get_H_Size() + end_con;
            cout << end_con << endl;
        }


    }
    cout << endl;
    cout << "Score:" << endl;
    cout << "Player:   -     Tokens" << endl;
    for (int i = 0; i < size; i++)
    {
        cout << "Player " << p[i].GetNum() << "   -    " << p[i].GetTokens() << endl;
    }
    int win = 0;
    for (int i = 0; i < size; i++)
    {
        if (p[i].GetTokens() > p[win].GetTokens())
        {
            win = i;
        }
    }
    cout << "Player " << p[win].GetNum() << " ganhou com " << p[win].GetTokens() << "!" << endl;
    return 0;
}
